// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple.proto

#ifndef PROTOBUF_INCLUDED_simple_2eproto
#define PROTOBUF_INCLUDED_simple_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_simple_2eproto 

namespace protobuf_simple_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_simple_2eproto
class SimpleRequest;
class SimpleRequestDefaultTypeInternal;
extern SimpleRequestDefaultTypeInternal _SimpleRequest_default_instance_;
class SimpleResponse;
class SimpleResponseDefaultTypeInternal;
extern SimpleResponseDefaultTypeInternal _SimpleResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::SimpleRequest* Arena::CreateMaybeMessage<::SimpleRequest>(Arena*);
template<> ::SimpleResponse* Arena::CreateMaybeMessage<::SimpleResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class SimpleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SimpleRequest) */ {
 public:
  SimpleRequest();
  virtual ~SimpleRequest();

  SimpleRequest(const SimpleRequest& from);

  inline SimpleRequest& operator=(const SimpleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleRequest(SimpleRequest&& from) noexcept
    : SimpleRequest() {
    *this = ::std::move(from);
  }

  inline SimpleRequest& operator=(SimpleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleRequest* internal_default_instance() {
    return reinterpret_cast<const SimpleRequest*>(
               &_SimpleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimpleRequest* other);
  friend void swap(SimpleRequest& a, SimpleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleRequest* New() const final {
    return CreateMaybeMessage<SimpleRequest>(NULL);
  }

  SimpleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleRequest& from);
  void MergeFrom(const SimpleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 i = 1;
  bool has_i() const;
  void clear_i();
  static const int kIFieldNumber = 1;
  ::google::protobuf::int32 i() const;
  void set_i(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SimpleRequest)
 private:
  void set_has_i();
  void clear_has_i();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 i_;
  friend struct ::protobuf_simple_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SimpleResponse) */ {
 public:
  SimpleResponse();
  virtual ~SimpleResponse();

  SimpleResponse(const SimpleResponse& from);

  inline SimpleResponse& operator=(const SimpleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleResponse(SimpleResponse&& from) noexcept
    : SimpleResponse() {
    *this = ::std::move(from);
  }

  inline SimpleResponse& operator=(SimpleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleResponse* internal_default_instance() {
    return reinterpret_cast<const SimpleResponse*>(
               &_SimpleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SimpleResponse* other);
  friend void swap(SimpleResponse& a, SimpleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleResponse* New() const final {
    return CreateMaybeMessage<SimpleResponse>(NULL);
  }

  SimpleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleResponse& from);
  void MergeFrom(const SimpleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 i = 1;
  bool has_i() const;
  void clear_i();
  static const int kIFieldNumber = 1;
  ::google::protobuf::int32 i() const;
  void set_i(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SimpleResponse)
 private:
  void set_has_i();
  void clear_has_i();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 i_;
  friend struct ::protobuf_simple_2eproto::TableStruct;
};
// ===================================================================

class SimpleService_Stub;

class SimpleService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SimpleService() {};
 public:
  virtual ~SimpleService();

  typedef SimpleService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void simple(::google::protobuf::RpcController* controller,
                       const ::SimpleRequest* request,
                       ::SimpleResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SimpleService);
};

class SimpleService_Stub : public SimpleService {
 public:
  SimpleService_Stub(::google::protobuf::RpcChannel* channel);
  SimpleService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SimpleService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements SimpleService ------------------------------------------

  void simple(::google::protobuf::RpcController* controller,
                       const ::SimpleRequest* request,
                       ::SimpleResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SimpleService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleRequest

// required int32 i = 1;
inline bool SimpleRequest::has_i() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleRequest::set_has_i() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleRequest::clear_has_i() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleRequest::clear_i() {
  i_ = 0;
  clear_has_i();
}
inline ::google::protobuf::int32 SimpleRequest::i() const {
  // @@protoc_insertion_point(field_get:SimpleRequest.i)
  return i_;
}
inline void SimpleRequest::set_i(::google::protobuf::int32 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:SimpleRequest.i)
}

// -------------------------------------------------------------------

// SimpleResponse

// required int32 i = 1;
inline bool SimpleResponse::has_i() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleResponse::set_has_i() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleResponse::clear_has_i() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleResponse::clear_i() {
  i_ = 0;
  clear_has_i();
}
inline ::google::protobuf::int32 SimpleResponse::i() const {
  // @@protoc_insertion_point(field_get:SimpleResponse.i)
  return i_;
}
inline void SimpleResponse::set_i(::google::protobuf::int32 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:SimpleResponse.i)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_simple_2eproto
