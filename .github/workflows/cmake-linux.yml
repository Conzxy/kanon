name: Kanon CMake Linux CI

on:
  push:
    branches: ['linux', 'master']
    paths:
      - '**/linux/**.cc'
      - '**/linux/**.h'
      - '**/linux/**.inl'
  pull_request:
    branches: ['linux']
    paths:
      - '**/linux/**.cc'
      - '**/linux/**.h'
      - '**/linux/**.inl'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: checkout all the submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Display github.workspace
      run: |
        echo "github.workspace is ${{ github.workspace }}."
        ls ${{ github.workspace }}
      shell: bash
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        cd ${{ github.workspace }}
        ls
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: bash
    
    - name: CMake Build
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        cmake --build . --parallel $(nproc)
      shell: bash
      
    - name: CMake Install
      run: |
        cd ${{github.workspace}}/build
        cmake --install . --prefix ${{github.workspace}}/dummy
      shell: bash
